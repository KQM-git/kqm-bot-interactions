# override permissions for any command
permissions:
  liveinteraction:
    whitelist: ${ [ ROLES.PILLAR_STAFF, ...getValuesRecursive(ROLES.ADMIN) ] }

  livecommand:
    whitelist: ${ [ ROLES.PILLAR_STAFF, ...getValuesRecursive(ROLES.ADMIN) ] }
#   # Its possible to set permissions for internal commands too.
  role:
    whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
#
#   # Its possible to set permissions for custom commands
#   echo:
#     whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
#
#   # Its possible to set permissions for custom commands in folders
#   characters/amber:
#     whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }


# Only delete stuff after this line if you know what you're doing.
modules:
  userNotes:
    enabled: true
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ...getValuesRecursive(ROLES.MOD) ] }

  pointsSystem:
    enabled: true
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.GUHUA_GUIDE_GRANDMASTER, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        
    loggingChannel: "${ CHANNELS.BOT_LOGGING }"
    
  vanityRoles:
    enabled: true

    # Who can use the /vanityrole command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist:
        - "${ ROLES.PATREON_ARCHON }"
        - "${ ROLES.PATREON_ADEPTUS }"

    # Log whenever someone's custom role is updated
    loggingChannel: "${ CHANNELS.BOT_LOGGING }"

    createRoleAfter: "${ ROLES.PATREON_ADEPTUS }"

  reactRoles:
    enabled: true

    # Who can use the /reactroles command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

    configs:
      randomRole:
        title: "Get a random role"
        description: |-
          Get a random role out of <@&947365141450727495>, <@&947356633737080853>, and <@&947356702318153749>

        permissions:
          blacklist:
            - "947365141450727495"
            - "947356633737080853"
            - "947356702318153749"
          
        reactions:
          "pe:946999484175491102":
            role: >
              ${
                const reactionRoles = [
                  "947365141450727495",
                  "947356633737080853",
                  "947356702318153749"
                ];

                reactionRoles[Math.floor(Math.random() * reactionRoles.length)];
              }
            description: "Random Role"

      main:
        image: "https://cdn.discordapp.com/attachments/810941835949244447/811264667867414558/unknown.png"
        title: "Would you be interested in extended car insurance?"
        description: |-
          It would benefit you in the long term if you opted-in for out Extended Car Insurance:tm:. We cover everything from your car being blown up by the local gang to Russian troops commandeering your vehicle.

          *For full coverage terms please read our [Terms of Service](https://www.youtube.com/watch?v=dQw4w9WgXcQ)*

        # Who can get these roles
        permissions:
          whitelist:
            - "${ ROLES.VERIFIED }"

        reactions:
          # REACTION EMOJI ID: ROLE
          "pe:946999484175491102":
            role: "945554661413367819"
            description: "Yes"

          "based:945928754973270067":
            role: "945554661413367819"
            description: "Absolutely"
      
      theoryreadme:
        image: "https://media.discordapp.net/attachments/763589418086432778/813379829151301642/GI_-_KQM_2.png"
        title: "Theorycrafting Section Roles"
        color: ${ COLORS.ELECTRO_PURPLE }
        description: |-
          React with the matching emoji for specific roles
        permissions:
          whitelist:
            - "${ ROLES.VERIFIED }"

        reactions:
          # REACTION EMOJI ID: ROLE
          "keqdesk:813764611878682664":
            role: "${ ROLES.THEORYCRAFTER }"
            description: "<@&${ ROLES.THEORYCRAFTER }>"

          "keqnote:838482574644346931":
            role: "${ ROLES.LIBRARY_SUBMISSIONS }"
            description: "<@&${ ROLES.LIBRARY_SUBMISSIONS }>"

          "keqsalute:829758345619570749":
            role: "${ ROLES.THEORYHUNTER }"
            description: "<@&${ ROLES.THEORYHUNTER }>"

          "madamekePING:813377572002988093":
            role: "${ ROLES.TC_PING }"
            description: "<@&${ ROLES.TC_PING }>"

          "keqingPain:854599966432559154":
            role: "${ ROLES.GUIDE_SUBMISSIONS }"
            description: "<@&${ ROLES.GUIDE_SUBMISSIONS }>"
          

      #staff:
      #  image: "https://cdn.discordapp.com/attachments/945321873418362880/953178188639531078/unknown.png"
      #  title: "Emergency Staff Allocation"
      #  description: |-
      #    This command should only be able to be used by staff. Please gather roles that you think you were missing. Abuse of this command will be punished.
      #  # Literally ALL staff roles
      #  permissions:
      #    whitelist:
      #      - "${ ROLES.STAFF }"
      #      - "${ ROLES.PILLAR_STAFF }"
      #
      #  reactions:
      #    # REACTION EMOJI ID: ROLE
      #    "kapetayo:904967085170491412":
      #      role: "${ ROLES.PILLAR_STAFF }"
      #      description: "Pillar Staff"

            
  modMail:
    enabled: true

    # This restricts who can open a thread. If this is not set, anyone can open a thread by DMing the bot
    #permissions:
    #  whitelist:
    #    - "${ ROLES.VERIFIED }"

    #ignoreRole: "${ ROLES.MODMAIL_IGNORED }"

    channels:
      logging: "${ CHANNELS.MODMAIL_LOGGING }"
      threads: "${ CHANNELS.MODMAIL_THREADS }"

  # Role kits
  roleKits:
    enabled: true

    # This restricts who can use the /rolekits command. if its not set, anyone with the MANAGE_ROLES permission can use the command.
    permissions: 
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.PILLAR_STAFF, ROLES.THE_TRADES, ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR ] }

    # The kits that are available
    kits:  
      wangshengcoffin:
        exportAsCommand: true
        name: Wangsheng Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.WANGSHENG, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        addRoles:
          - "${ ROLES.WANGSHENG_COFFIN } "
        removeRoles:
          - "${ ROLES.THEORYCRAFTER }"
          - "${ ROLES.THEORYHUNTER }"
          - "${ ROLES.LIBRARY_SUBMISSIONS }"
          - "${ ROLES.GUIDE_SUBMISSIONS }"

      guhuacoffin:
        exportAsCommand: true
        name: Guhua Exile
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.GUHUA, ROLES.GUHUA_GUIDE_GRANDMASTER ] }
        addRoles:
          - "${ ROLES.GUHUA_EXILE } "
        removeRoles:

      leakscoffin:
        exportAsCommand: true
        name: Leaky Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.LEAKS, ROLES.YUEHAI_LEAKS_HEAD ] }
        addRoles:
          - "${ ROLES.LEAKY_COFFIN }"
        removeRoles:
          - "${ ROLES.LEAKS }"
          - "${ ROLES.LEAKS_PING }"
      
      contributor:
        exportAsCommand: true
        name: Wangsheng Contributor
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR] }
        addRoles:
          - "${ ROLES.WANGSHENG_CONTRIBUTOR }"
          
      theoryhunter:
        exportAsCommand: true
        name: Wangsheng Theoryhunter
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }"
        addRoles:
          - "${ ROLES.WANGSHENG_THEORYHUNTER }"

      theorycrafter:
        exportAsCommand: true
        name: Wangsheng Theorycrafter
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }"
        addRoles:
          - "${ ROLES.WANGSHENG_THEORYCRAFTER }"

      whale:
        exportAsCommand: true
        name: WhaleBTW
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
        addRoles:
          - "${ ROLES.WHALEBTW }"

      kqm:
        exportAsCommand: true
        name: KeqingMain
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
        addRoles:
          - "${ ROLES.KEQINGMAIN }"

  # Verification Module
  verification:
    enabled: true

    # This restricts who can use the /verification command. if its not set, anyone can use the command.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

    # This sets the channel to use for sending the initialMessage into. If this is not set then the bot will not automatically send the welcome message.
    # welcomeChannel: "${  CHANNELS.WELCOME  }"

    # The role to add to users when they successfully accept the rules.
    verifiedRole: 
      - "${ ROLES.VERIFIED }"
      - "${ ROLES.MEDIA }"

    interactions:
      # You can use this to set a different greeting message. If this is not set then initialMessage is used.
      greetingsMessageInteractionPath: "verification/initial_message"

      # The initial message displayed when the /verification is run.
      initialMessageInteractionPath: "verification/initial_message"

      # The interaction to display when the user presses the verification button.
      rulesAcknowledgementInteractionPath: "verification/rules_acknowledgement"

    # Verification button settings
    button:
      title: "Verify"
      type: "PRIMARY"

  supportThreads:
    enabled: true

    # This restricts who can use the /supportthreads command. if its not set, anyone with MANAGE_THREADS permission can use the command.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

    configs:
      main:
        # The interaction to display when the command is run.
        displayInteractionPath: "verification/arte_test"

        # The interaction to display when someone interacts with the supportThreadButton
        supportThreadConfirmationInteractionPath: "verification/arte_test"

        # The interaction to send in the opened thread
        supportThreadDisplayInteractionPath: "verification/arte_test"

        # The channel to open the thread in
        supportThreadChannel: "945738093766533140"

        # Configure the button to open a support thread, if this is not set then a button with the label "HELP" is used
        supportThreadButton:
          title: "HELP"
          type: "PRIMARY"

        # Interaction to display when the user clicks the troubleshootButton
        troubleshootInteractionPath: "verification/arte_test"

        # An optional button that displays an interaction upon clicking. if this is not set, no button is displayed
        troubleshootButton:
          title: "TROUBLESHOOT"
          type: "SUCCESS"
